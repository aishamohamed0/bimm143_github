---
title: "Class10_pt2"
author: "Aisha Mohamed (A16297530)"
format: pdf
---

## Search and retrieve ADK structures


```{r}
library(bio3d)
aa <- get.seq("1ake_A")
aa
```

Now I can search the PDB database for related sequences. 

```{r}
#b <- blast.pdb(aa)
```

```{r}
#hits <- plot(b)
```


```{r}
#attributes(b)
#head(b$hit.tbl)
```


```{r}
# List out some 'top hits'

#head(hits$pdb.id)
```


These are the related structures in the PDB databse that we found via a BLAST search. 

```{r}
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')

hits$pdb.id
```


Side-note: Lets annotate these structres (in other words find out what they are, what species
they are from, stuff about the experiment they were solved in etc)

For this we can use the `pdb.annotate()`

```{r}
anno <- pdb.annotate(hits$pdb.id)
```


```{r}
attributes(anno)
```

```{r}
head(anno)
```

Now we can download all these structures for further analysis with the `get.pdb()` function.  

```{r}
# Download related PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```


Now we have all these related structures we can align and superpose. 


```{r}
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
pdbs
```

## Principal Component Analysis

```{r}
# Perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray)
```


```{r}
# Visualize first principal component
pc1 <- mktrj(pc.xray, pc=1, file="pc_1.pdb")
```



## Visualization of the models and their estimated reliability


![](HIVPR_MONOMER_94B5B_UNRELAXED_RANK_001_ALPHAFOLD2_PTM_MODEL_5_SEED_000.PDB-HIVPR_MONOMER_94B5B_UNRELAXED_RANK_002_ALPHAFOLD2_PTM_MODEL_4_SEED_000.PDB-HIVPR_MONOMER_94B5B_UNRELAXED_RANK_004_ALPHAFOLD2_PTM_MODEL_3_SEED_000.PDB-HIVPR_MONOMER_9)


# Custom analysis of resulting models

```{r}
results_dir <- "hivpr_dimer_23119"
```


```{r}
# File names for all PDB models
pdb_files <- list.files(path=results_dir,
                        pattern="*.pdb",
                        full.names = TRUE)
basename(pdb_files)
```


```{r}
library(bio3d)

# Read all data from Models 
#  and superpose/fit coords

pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")

```

Quick view of model sequences. 

```{r}
pdbs
```


Calculate the RMSD between all models.

```{r}
rd <- rmsd(pdbs)
rd
```

```{r}
range(rd)

```



```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")
```

The model structure. 

```{r}
plotb3(pdbs$b, typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```


```{r}
core <- core.find(pdbs)
```

More suitable superposition and writing out the fitted structures. 

```{r}
core.inds <- print(core, vol=0.5)
```


```{r}
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")

```



```{r}
rd <- rmsd(xyz)
```




Core superposed structure colored by B-Factor (pLDDT). 

![](HIVPR_DIMER_23119_UNRELAXED_RANK_001_ALPHAFOLD2_MULTIMER_V3_MODEL_1_SEED_000.PDB_FLSQ.PDB-HIVPR_DIMER_23119_UNRELAXED_RANK_005_ALPHAFOLD2_MULTIMER_V3_MODEL_3_SEED_000.PDB_FLSQ.PDB-HIVPR_DIMER_23119_UNRELAXED_RANK_004_ALPHAFOLD2_MULTIMER_V3_)


Examining the RMSF between positions of the structure. 

```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```

 # Predicted Alignment Error for domains


AlphaFold also produces Predicted Aligned Error (PAE). Read the files in and see the
predictions for the model structures.  

```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path=results_dir,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```


Read the 1st and 5th files. 


```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```


```{r}
# Per-residue pLDDT scores 
#  same as B-factor of PDB..
head(pae1$plddt) 
```


Ranking models based on max PAE values. Model 5 is worse than model 1. 

```{r}
pae1$max_pae
```


```{r}
pae5$max_pae
```

Plotting the N by N PAE scores using ggplot. N = Number of residues. 

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```


```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))

```

Plot using the same Z range. 

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```



# Residue conservation from alignment file


```{r}
aln_file <- list.files(path=results_dir,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```


```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
```

How many sequences are in this alignment. 

```{r}
dim(aln$ali)
```


We can score residue conservation in the alignment with the conserv() function.


```{r}
sim <- conserv(aln)
```


```{r}
plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"),
       ylab="Conservation Score")
```


The conserved Active Site residues: D25, T26, G27, A28. These positions will stand out 
compared to others if we generate a consensus sequence with a high cutoff value:


```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```

Map this conservation score to the Occupancy column of a PDB file to view in Mol*. 

```{r}
m1.pdb <- read.pdb(pdb_files[1])
occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")
```




![](M1_CONSERV.PDB)


Top ranked dimer model colored by sequence conservation. Conserved positions in a darker
purple. The DTGA motif of one chain is highlighted in green. 