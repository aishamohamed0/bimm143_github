---
title: "Class6"
author: "Aisha Mohamed (A16297530)"
format: pdf
---
Function are the way we get stuff done in R. We call a function to read
data, compute stuff, plot stuff etc. 

R makes writing function accessible but we should always start by trying
to get a working snippet of code first before we write our function. 

#Todays lab 

We will grade a whole class of student assignments. 


```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

```

If we want the average we can use the `mean()` function. 

```{r}
mean(student1)

```

Let's be nice instructors and drop the lowest score so the answer here
should be 100. 

I can use the `min()` function to find the lowest value. 

I can use the minus sign to get everything but the element of the min
value. 
```{r}
min(student1)

which.min(student1)

student1[-which.min(student1)]
student1[-8]

mean(student1[-which.min(student1)])
```
Testing on the other students. 

The `mean()` with the NA input returns NA by default, but this can be
changed. 

```{r}
mean(student2, na.rm = TRUE)

mean(student2[-which.min(student2)])

```

The same approach used with student2, does not work with student3. 

```{r}
student3

mean(student3)

mean(student3, na.rm = TRUE)

```

To stop repetitively typing `student1` and `student2`, lets work with
the input x. 

```{r}
x <- student2
x
```

Google/Claude/chat gpt told me about the `is.na` function. 

```{r}
x
is.na(x)
x[is.na(x)]
```

We can use logical to index a vector. 

```{r}
y <- 1:5
y
y > 3
y[y > 3]
```


```{r}
#Mask each NA values to 0 
x[is.na(x)] <- 0

x
```

This is my working snippet of code that solves the problem for all my
example student inputs. 

```{r}

x <- student2
#Mask each NA values to 0 
x[is.na(x)] <- 0
#Drop the lowest score to get the mean
mean(x[-which.min(x)])

```


> Q1. Write a function grade() to determine an overall grade from a
vector of student homework assignment scores dropping the lowest single
score. If a student misses a homework (i.e. has an NA value) this can be
used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example
class gradebook such as this one in CSV format:
“https://tinyurl.com/gradeinput” [3pts]


```{r}

grade <- function(x) {
  #Mask each NA values to 0 
  x[is.na(x)] <- 0
  #Drop the lowest score to get the mean
  mean(x[-which.min(x)])
}

```

Use this `grade()` function.

```{r}
grade(student1)
grade(student2)
grade(student3)
```

We need to read the gradebook. 
```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
gradebook
```

I can use the `apply()` function to answer Q1. 

```{r}
ans <- apply(gradebook, 1, grade)

ans
```

> Q2. Using your grade() function and the supplied gradebook, Who is the
top scoring student overall in the gradebook? [3pts]

```{r}
which.max(ans)
```

> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

We could calculate the `mean()` score for each homework. 
```{r}
#Mask NA values to 0. 
mask <- gradebook

mask[is.na(mask)] <- 0 

hw.ave <- apply(mask, 2, mean)
hw.ave

which.min(hw.ave)

```
We can also utilize the `sum()` function. 

```{r}
apply(gradebook, 2, sum, na.rm = T)
which.min(apply(gradebook, 2, sum, na.rm = T))
```


> Optional Extension: From your analysis of the gradebook, which
homework was most predictive of overall score (i.e. highest correlation
with average grade score)? [1pt]

```{r}
cor(mask$hw5, ans)
```
```{r}
apply(mask, 2, cor, y = ans)
predic <- apply(mask, 2, cor, y = ans)

which.max(predic)
```

