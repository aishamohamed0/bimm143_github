---
title: "[Class 7] Machine Learning 1"
author: "Aisha Mohamed"
format: pdf
---

# First up kmeans()

Demo ad using kmeans() function in base R. First make up some data with a known structure. 

```{r}
tmp <- c(rnorm(30, -3), rnorm(30, 3))
x <- cbind(x = tmp, y = rev(tmp))
plot(x)
```

Now we have some made up data in `x` let's see how kmeans
() works with this data. 

```{r}
k <- kmeans(x, centers = 2, nstart = 20)
k
```

> Q. How many points are in each cluster?


```{r}
k$size 
```


> Q. How do we go to the cluster membership/assignment?

```{r}
k$cluster
```

> Q. What about cluster centers? 

```{r}
k$centers
```

Now we got to the main results, let's use them to plot our data with the kmeans() result. 

```{r}
plot(x, col = k$cluster)
points(k$centers, col = "blue", pch = 15)
```

## Now for Hierarchical Clustering

We will cluster the sama data `x` with the `hclust()`.
In this case `hclust()` requires a distance matrix as input. 

```{r}
hc <- hclust(dist(x))
hc
```

Let's plot our hclut result.
```{r}
plot(hc)
```


To get our cluster membership vector, we need to "cut" the tree with the `cutree()` function. 

```{r}
grps <- cutree(hc, h = 8)
grps
```

Now let's plot our data with the `hclust()` results.

```{r}
plot(x, col = grps)
```








## Principal Component Analysis (PCA)

## PCA of UK food data

Read data from website and try a few visualizations. 



```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
```

> Q1. How many rows and columns are in your new data frame
named x? What R functions could you use to answer this
questions?

```{r}
nrow(x)
ncol(x)
dim(x)
```

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names = 1)
x
```


> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

Using the `row.names` function rather than minus indexing is much preferable to me because I
understand it better. Both are useful to utlize but in this problem, `row.names` seems 
much more straightforward. 


Spotting major differences and trends. 

```{r}
cols <- rainbow(nrow(x))
barplot(as.matrix(x), col = cols)
```

> Q3: Changing what optional argument in the below barplot() function results in the 
above plot?

Having beside = FALSE, (or just leave it as default) results in the barplot that is seen
above. Beside = True will equal the below barplot. 



```{r}
barplot(as.matrix(x), col = cols, beside = TRUE)
```



> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the 
following code and resulting figure? What does it mean if a given point lies on 
the diagonal for a given plot?

If a given point lies on the diagonal for a give plot, that means the two countries
being compared have points that are correlated. 



```{r}
pairs(x, col = cols)
```

> Q6. What is the main differences between N. Ireland and the other countries of the UK
in terms of this data-set?

N. Ireland is much more different compared to the other countries, with very
little correlation that can be mapped out. 




PCA to the rescue. 
The main base R PCA function is called `prcomp()`
and we will need to give it the transpose of our input data. 

```{r}
pca <- prcomp (t(x) )

```

There is a nice summary of how well PCA is doing.

```{r}
summary(pca)
```


```{r}
attributes(pca)
```

> Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds 
text labels over the data points.

To make our new PCA plot (aka PCA score plot) we access
`pca$x`.

```{r}
plot(pca$x[,1], pca$x[,2], xlab = "PC1", ylab = 
       "PC2")
text(pca$x[,1], pca$x[,2], colnames(x))
```



> Q8. Customize your plot so that the colors of the country names match the colors in 
our UK and Ireland map and table at start of this document. 

Color the plot. 

```{r}
country_cols <- c("orange", "red", "blue", "green")
plot(pca$x[,1], pca$x[,2], xlab = "PC1", ylab = 
       "PC2")
text(pca$x[,1], pca$x[,2], colnames(x), col = country_cols)
```


Calculting how much variation in the original data for each PC accounts for. 

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```



```{r}
z <- summary(pca)
z$importance
```


```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")

```




```{r}
## Lets focus on PC1 as it accounts for > 90% of variance 
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```


> Q9: Generate a similar ‘loadings plot’ for PC2. What two food groups feature
prominantely and what does PC2 maninly tell us about?



```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )

```




Using ggplot to visualize these figures. 


```{r}
library(ggplot2)

df <- as.data.frame(pca$x)
df_lab <- tibble::rownames_to_column(df, "Country")

# Our first basic plot
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country) + 
  geom_point()
```



```{r}
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country, label=Country) + 
  geom_hline(yintercept = 0, col="gray") +
  geom_vline(xintercept = 0, col="gray") +
  geom_point(show.legend = FALSE) +
  geom_label(hjust=1, nudge_x = -10, show.legend = FALSE) +
  expand_limits(x = c(-300,500)) +
  xlab("PC1 (67.4%)") +
  ylab("PC2 (28%)") +
  theme_bw()
```


For our PC contribution figures. 

```{r}
ld <- as.data.frame(pca$rotation)
ld_lab <- tibble::rownames_to_column(ld, "Food")

ggplot(ld_lab) +
  aes(PC1, Food) +
  geom_col()
```


```{r}
ggplot(ld_lab) +
  aes(PC1, reorder(Food, PC1), bg=PC1) +
  geom_col() + 
  xlab("PC1 Loadings/Contributions") +
  ylab("Food Group") +
  scale_fill_gradient2(low="purple", mid="gray", high="darkgreen", guide=NULL) +
  theme_bw()
```


Biplots. 

```{r}
## The inbuilt biplot() can be useful for small datasets 
biplot(pca)
```





## PCA of RNA-Seq data

Read in data from website. 

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

> Q. Q10: How many genes and samples are in this data set?


```{r}
nrow(rna.data)
```



```{r}
pca <- prcomp( t(rna.data), scale = TRUE)
summary(pca)
```

Do our PCA plot of this RNA-Seq data
```{r}
plot(pca$x[,1], pca$x[,2], xlab = "PC1", ylab = 
       "PC2")
```

```{r}
plot(pca$x[,1], pca$x[,2], xlab = "PC1", ylab = 
       "PC2")
text(pca$x[,1], pca$x[,2], colnames(rna.data))
```



Quick barplot summary of the proportion of variance for each PC. 

```{r}
plot(pca, main="Quick scree plot")

```

```{r}
## Variance captured per PC 
pca.var <- pca$sdev^2

## Percent variance is often more informative to look at 
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
```

Generate our own scree-plot. 

```{r}
barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")
```


```{r}
## A vector of colors for wt and ko samples
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"

plot(pca$x[,1], pca$x[,2], col=colvec, pch=16,
     xlab=paste0("PC1 (", pca.var.per[1], "%)"),
     ylab=paste0("PC2 (", pca.var.per[2], "%)"))

text(pca$x[,1], pca$x[,2], labels = colnames(rna.data), pos=c(rep(4,5), rep(2,5)))

```


Using ggplot. 

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)

# Our first basic plot
ggplot(df) + 
  aes(PC1, PC2) + 
  geom_point()

```

```{r}
# Add a 'wt' and 'ko' "condition" column
df$samples <- colnames(rna.data) 
df$condition <- substr(colnames(rna.data),1,2)

p <- ggplot(df) + 
        aes(PC1, PC2, label=samples, col=condition) + 
        geom_label(show.legend = FALSE)
p
```

```{r}
p + labs(title="PCA of RNASeq Data",
       subtitle = "PC1 clealy seperates wild-type from knock-out samples",
       x=paste0("PC1 (", pca.var.per[1], "%)"),
       y=paste0("PC2 (", pca.var.per[2], "%)"),
       caption="Class example data") +
     theme_bw()
```

