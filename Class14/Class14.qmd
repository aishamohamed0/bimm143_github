---
title: "Class14: RNA-Seq analysis mini-project"
author: "Aisha Mohamed"
format: pdf
---

```{r}
library(DESeq2)
```

Data import. For our session we have used the Sailfish gene-level estimated counts. 

```{r}
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"

# Import metadata and take a peak

colData = read.csv(metaFile, row.names = 1)
head(colData)
```

```{r}
countData = read.csv(countFile, row.names = 1)
head(countData)
```

We need to remove the first column from `countData`. 

```{r}
# Note we need to remove the odd first $length col

countData <- as.matrix(countData[,-1])
head(countData)
```

```{r}
# Filter count data where you have 0 read count across all samples.

countData = countData[rowSums(countData) != 0, ]

head(countData)
```

# Running DESeq2

Setting up the DESeqDataSet object that is required for the `DESeq()` function and then run the DESeq
pipeline. 

```{r}
dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
dds = DESeq(dds)
```

```{r}
dds
```

Get results for the HoxA1 knockdown versus control siRNA.Labeled as "hoxa1_kd" and "control_sirna" 
in our original colData metaFile input to DESeq. 

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```

> Q. Call the summary() function on your results to get a sense of how many genes are
up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```

## Volcano Plot

We will make a volcano plot to visually assess the data. A plot of log2 fold change vs
-log adjusted p-value.

```{r}
plot( res$log2FoldChange, -log(res$padj) )
```

> Q. Improve this plot by completing the below code, which adds color and axis labels.

```{r}
# Make a color vector for all genes

mycols <- rep("gray", nrow(res) )

# Color red the genes with absolute fold change above 2

mycols[ abs(res$log2FoldChange) > 2 ] <- "red"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2

inds <- (abs(res$padj) < 0.01) & (abs(res$log2FoldChange) > 2 )

mycols[ inds ] <- "blue"

plot( res$log2FoldChange, -log(res$padj), col= mycols,
      xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
```

# Adding gene annotation 

> Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to 
our results. 

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys= row.names(res), 
                    keytype="ENSEMBL",
                    column= "SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys= row.names(res), 
                    keytype="ENSEMBL",
                    column= "ENTREZID",
                    multiVals="first")

res$genename = mapIds(org.Hs.eg.db,
                    keys= row.names(res), 
                    keytype="ENSEMBL",
                    column= "GENENAME",
                    multiVals="first")

head(res, 10)
```


> Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file 
in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file ="deseq_results.csv")
```


## Pathway Analysis

Here we are going to use the `gage` and `pathview` packages for pathway analysis. 

```{r}
library(pathview)
library(gage)
library(gageData)
```

```{r}
data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only

kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways

head(kegg.sets.hs, 3)
```


The main gage() function requires a named vector of fold changes, where the names of the values 
are the Entrez gene IDs.

We will use `mapIDs()` function for this. 

```{r}
foldchanges = res$log2FoldChange

names(foldchanges) = res$entrez

head(foldchanges)
```

Now we can run the `gage` pathway analysis. 

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```


Look at the results. 

```{r}
attributes(keggres)
```


```{r}
# Look at the first few down (less) pathways
head(keggres$less)
```


Using the `pathview()` function to make a pathway plot with our RNA-Seq expression results shown in 
color. We'll manually supply a pathway.id ("hsa04110 Cell cycle") that we could see from above.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

![](hsa04110.pathview.png)


Also want to visualize "hsa03030" DNA replication. 

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa03030")
```

![](hsa03030.pathview.png)


```{r}
head(keggres$greater)
```


```{r}
## Focus on top 5 upregulated pathways here
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

Upregulated pathways (Top 5): 

![](hsa04640.pathview.png)
![](hsa04630.pathview.png)

![](hsa04142.pathview.png)

![](hsa00140.pathview.png)

![](hsa04330.pathview.png)


> Q. Can you do the same procedure as above to plot the pathview figures for the top 5
down-reguled pathways?

```{r}
## Focus on top 5 down-regulated pathways 
keggrespathways.less <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresids.less = substr(keggrespathways.less, start=1, stop=8)

keggresids.less
```

```{r}
pathview(gene.data = foldchanges, pathway.id = keggresids.less, species = "hsa")
```

Since "hsa04110" and "hsa03030" have already been visualized up above, only the 3 other IDs will
be printed out. 

Downregulated Pathways: 

![](hsa03013.pathview.png)

![](hsa03440.pathview.png)

![](hsa04114.pathview.png)



## Gene Ontology (G0)

We can also do a similar procedure with gene ontology. Similar to above, go.sets.hs has all GO
terms. go.subs.hs is a named list containing indexes for the BP, CC, and MF ontologies. Letâ€™s
focus on BP (a.k.a Biological Process) here.

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO

gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

## Reactome Analysis

Reactome is database consisting of biological molecules and their relation to pathways and
processes. 

Output the list of significant genes at the 0.05 level

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]

print(paste("Total number of significant genes:", length(sig_genes)))
```


```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, 
            col.names=FALSE, quote=FALSE)
```

